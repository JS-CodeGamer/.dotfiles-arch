{
  "CP Boiler Plate": {
    "description": "C++ Programming(mainly cp) boiler plate.",
    "prefix": [
      "boiler plate"
    ],
    "body": [
      "#include <bits/stdc++.h>\n",
      "/*-- OPTIMIZATIONS --*/",
      "#pragma GCC diagnostic ignored \"-Wattributes\"",
      "#pragma GCC diagnostic ignored \"-Wpragmas\"",
      "#define fastcall __attribute__((optimize(\"-O3\")))",
      "#pragma GCC optimize(1)",
      "#pragma GCC optimize(2)",
      "#pragma GCC optimize(3)",
      "#pragma GCC optimize(\"Ofast\")",
      "#pragma GCC optimize(\"inline\")",
      "#pragma GCC optimize(\"-fgcse\")",
      "#pragma GCC optimize(\"-fgcse-lm\")",
      "#pragma GCC optimize(\"-fipa-sra\")",
      "#pragma GCC optimize(\"-ftree-pre\")",
      "#pragma GCC optimize(\"-ftree-vrp\")",
      "#pragma GCC optimize(\"-fpeephole2\")",
      "#pragma GCC optimize(\"-ffast-math\")",
      "#pragma GCC optimize(\"-fsched-spec\")",
      "#pragma GCC optimize(\"unroll-loops\")",
      "#pragma GCC optimize(\"-falign-jumps\")",
      "#pragma GCC optimize(\"-falign-loops\")",
      "#pragma GCC optimize(\"-falign-labels\")",
      "#pragma GCC optimize(\"-fdevirtualize\")",
      "#pragma GCC optimize(\"-fcaller-saves\")",
      "#pragma GCC optimize(\"-fcrossjumping\")",
      "#pragma GCC optimize(\"-fthread-jumps\")",
      "#pragma GCC optimize(\"-funroll-loops\")",
      "#pragma GCC optimize(\"-fwhole-program\")",
      "#pragma GCC optimize(\"-freorder-blocks\")",
      "#pragma GCC optimize(\"-fschedule-insns\")",
      "#pragma GCC optimize(\"inline-functions\")",
      "#pragma GCC optimize(\"-ftree-tail-merge\")",
      "#pragma GCC optimize(\"-fschedule-insns2\")",
      "#pragma GCC optimize(\"-fstrict-aliasing\")",
      "#pragma GCC optimize(\"-fstrict-overflow\")",
      "#pragma GCC optimize(\"-falign-functions\")",
      "#pragma GCC optimize(\"-fcse-skip-blocks\")",
      "#pragma GCC optimize(\"-fcse-follow-jumps\")",
      "#pragma GCC optimize(\"-fsched-interblock\")",
      "#pragma GCC optimize(\"-fpartial-inlining\")",
      "#pragma GCC optimize(\"no-stack-protector\")",
      "#pragma GCC optimize(\"-freorder-functions\")",
      "#pragma GCC optimize(\"-findirect-inlining\")",
      "#pragma GCC optimize(\"-fhoist-adjacent-loads\")",
      "#pragma GCC optimize(\"-frerun-cse-after-loop\")",
      "#pragma GCC optimize(\"inline-small-functions\")",
      "#pragma GCC optimize(\"-finline-small-functions\")",
      "#pragma GCC optimize(\"-ftree-switch-conversion\")",
      "#pragma GCC optimize(\"-foptimize-sibling-calls\")",
      "#pragma GCC optimize(\"-fexpensive-optimizations\")",
      "#pragma GCC optimize(\"-funsafe-loop-optimizations\")",
      "#pragma GCC optimize(\"inline-functions-called-once\")",
      "#pragma GCC optimize(\"-fdelete-null-pointer-checks\")",
      "// clang-format off",
      "#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")",
      "// clang-format on",
      "/*-- OPTIMIZATIONS END --*/\n",
      "using namespace std;\n",
      "#define il inline",
      "typedef long int l;\n",
      "typedef long long int ll;\n",
      "/*-- HELPERS --*/",
      "#define VARGS_(_10, _9, _8, _7, _6, _5, _4, _3, _2, _1, N, ...) N",
      "#define VARGS(...) VARGS_(__VA_ARGS__, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)",
      "#define CONCAT_(a, b) a##b",
      "#define CONCAT(a, b) CONCAT_(a, b)",
      "/* HELPERS END */\n",
      "/*-- LOOPS --*/",
      "// clang-format off",
      "#define rep_4(start, var, end, step) for (int var = start; var < end; var += step)",
      "// clang-format on",
      "#define rep_3(start, var, end) rep_4(start, var, end, 1)",
      "#define rep_2(var, end) rep_3(0, var, end)",
      "#define rep_1(end) rep_3(0, i, end)",
      "#define rep(...) CONCAT(rep_, VARGS(__VA_ARGS__))(__VA_ARGS__)",
      "/* LOOPS END */\n",
      "/*-- DATA STRUCTURES --*/",
      "#define ump(dt, dt2) unordered_map<dt, dt2>",
      "#define pii pair<int, int>",
      "#define F first",
      "#define S second",
      "/* DATA STRUCTURES END */\n",
      "/*-- METHODS / FUNCTIONS --*/",
      "#define pb push_back",
      "#define dbg(...) logger(#__VA_ARGS__, __VA_ARGS__)",
      "template <typename T> il T max(T &a, T &b) { return ((a > b) ? a : b); }",
      "template <typename T> il T min(T &a, T &b) { return ((a < b) ? a : b); }",
      "const int MOD = 1e9+7;",
      "template <typename T> T mod(T a, T b) { return (a + b) % MOD; }",
      "/* METHODS / FUNCTIONS END */\n",
      "template <typename... Args> void logger(string vars, Args &&...values) {",
      "\tcout << vars << \" = \";",
      "\tstring delim = \" \";",
      "\t(..., (cout << delim << values, delim = \", \"));",
      "\tcout << '\\n';",
      "}\n",
      "void solve(int tcase);\n",
      "int main() {",
      "\tios_base::sync_with_stdio(false);",
      "\tcin.tie(NULL);",
      "\tint tcases = 1;",
      "\tcin >> tcases;",
      "\tfor (int tcase = 0; tcase < tcases; tcase++) {",
      "\t\tsolve(tcase);",
      "\t}",
      "\treturn 0;",
      "}\n",
      "void solve(int tcase) {",
      "\t$0",
      "}"
    ]
  },
  "Debugger statement": {
    "description": "Debugger #define statement",
    "prefix": "debugger",
    "body": [
      "#define dbg(...) logger(#__VA_ARGS__, __VA_ARGS__)",
      "template <typename... Args> void logger(string vars, Args &&...values) {",
      "\tcout << vars << \" = \";",
      "\tstring delim = \" \";",
      "\t(..., (cout << delim << values, delim = \", \"));",
      "\tcout << '\\n';",
      "}"
    ]
  }
}
